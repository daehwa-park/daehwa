#include<iostream>
#include<math.h>
using namespace std;

#include "Matrix.h"

int main() {
	CMatrix m;
	CMatrix b;
	CMatrix d;
	int n,k=0;
	int r, c;
	cout << "--------------------------벡터-행렬 연산 클래스--------------------------" << endl;
	while (1) {
		if (k >= 1)
			cout << "-----------------------------------------------------------------------------" << endl;
		cout << "1. 행렬,벡터 생성		2. 행렬의 차원 변경	    3. 행렬의 원소 변경" << endl;
		cout << "4. 영행렬 생성                  5. 단위행렬 생성            6. 행렬의 스칼라곱 계산" << endl;
		cout << "7. 행렬의 전치                  8. 행렬의 고유합 계산       9. 행렬의 역행렬" << endl;
		cout << "10. 행렬의 덧셈 계산            11. 행렬의 뺄셈 계산        12. 행렬의 곱셈 계산" << endl;
		cout << "13. 벡터에 대한 내적 계산       14.벡터에 대한 외적 계산    15. 두 벡터간의 거리 계산" << endl;
		cout << "16. 행렬식 계산과 특이여부 판단 17. 현재의 행렬 보기        18. 종료" << endl;
		cout << "사용하고 싶은 기능을 선택하세요.>> ";
		cin >> n;
	
		switch (n) {
		case 1:
			int r1, c1;
			cout << "------------------------------------------------------------------------------" << endl;
			cout << "생성하고 싶은 행렬의 행과 열의 개수를 작성해주세요.(벡터는 열을 1로 생성)>> ";
			cin >> r1 >> c1;
			m.changeDim(r1, c1);
			cout << "행렬을 순서대로 초기화 해주세요." << endl;
			m.write();
			m.show();
			cout << "행렬(벡터) 생성 완료했습니다." << endl;
			k++;
			r = r1;
			c = c1;
				break;
		case 2: 
			int r2,c2;
			cout << "------------------------------------------------------------------------------" << endl;
			cout << "변경하고 싶은 행과 열의 개수를 작성해주세요.(벡터는 열을 1로 변경)>>";
			cin >> r2 >> c2;
			m.changeDim(r2, c2);
			cout << "행렬을 순서대로 초기화 해주세요." << endl;
			m.write();
			m.show();
			cout << "행렬의 차원 변경 완료했습니다." << endl;
			r = r2;
			c = c2;
			break;
		case 3: 
			cout << "------------------------------------------------------------------------------" << endl;
			cout << "행렬 원소를 순서대로 작성해주세요." << endl;
			m.write();
			m.show();
			cout << "행렬의 원소 변경 완료했습니다." << endl;
			break;
		case 4: 
			cout << "------------------------------------------------------------------------------" << endl;
			m.zeroMatrix();
			m.show();
			cout << "행렬을 영행렬로 바꾸었습니다." << endl;
			break;
		case 5:
			cout << "------------------------------------------------------------------------------" << endl;
			m.unitMatrix();
			m.show();
			cout << "행렬을 단위행렬로 바꾸었습니다." << endl;
			break;
		case 6:
			cout << "------------------------------------------------------------------------------" << endl;
			int l;
			cout << "행렬에 곱하고 싶은 정수를 작성해주세요.>> ";
			cin >> l;
			m.scalarProduct(l);
			m.show();
			cout << "스칼라 곱 계산 완료했습니다." << endl;
			break;
		case 7: 
			cout << "------------------------------------------------------------------------------" << endl;
			m.transpose();
			m.show();
			cout << "행렬 전치 완료했습니다." << endl;
			break;
		case 8: 
			int p;
			cout << "------------------------------------------------------------------------------" << endl;
			p = m.trace();
			cout << "이 행렬의 고유합은 " << p << "입니다." << endl;
			break;
		case 9: 
			int z;
			cout << "------------------------------------------------------------------------------" << endl;
			z = m.inverse();
			if (z == 1)
				break;
			m.show();
			cout << "행렬을 역행렬로 바꾸었습니다." << endl;
			break;
		case 10: 
			int r3, c3;
			cout << "------------------------------------------------------------------------------" << endl;
			cout << "덧셈을 할 행렬의 행과 열을 순서대로 작성해주세요.(원래 행렬과 크기가 같아야 덧셈가능)>> ";
			cin >> r3 >> c3;
			if (r != r3 || c != c3) {
				cout << "행렬의 크기가 같지 않습니다." << endl;
				break;
			}
			b.changeDim(r3, c3);
			d.changeDim(r3, c3);
			cout << "행렬을 순서대로 초기화 해주세요." << endl;
			b.write();
			b.show();
			d = m + b;
			cout << "원래 행렬과 덧셈한 결과입니다." << endl;
			d.show();
			break;
		case 11: 
			int r4, c4;
			cout << "------------------------------------------------------------------------------" << endl;
			cout << "뺄셈을 할 행렬의 행과 열을 순서대로 작성해주세요.(원래 행렬과 크기가 같아야 뺄셈가능)>> ";
			cin >> r4 >> c4;
			if (r != r4 || c != c4) {
				cout << "행렬의 크기가 같지 않습니다." << endl;
				break;
			}
			b.changeDim(r4, c4);
			d.changeDim(r4, c4);
			cout << "행렬을 순서대로 초기화 해주세요." << endl;
			b.write();
			b.show();
			d = m - b;
			cout << "원래 행렬과 뺄셈한 결과입니다." << endl;
			d.show();
			break;
		case 12: 
			int r5, c5;
			cout << "------------------------------------------------------------------------------" << endl;
			cout << "곱셈을 할 행렬의 행과 열을 순서대로 작성해주세요.(원래 행렬의 열과 곱셈을 할 행렬의 행이 같아야 곱셈가능)>> ";
			cin >> r5 >> c5;
			if (r != c5) {
				cout << "곱셈을 할 수 없습니다." << endl;
				break;
			}
			b.changeDim(r5, c5);
			d.changeDim(r, c5);
			cout << "행렬을 순서대로 초기화 해주세요." << endl;
			b.write();
			b.show();
			d = m * b;
			cout << "원래 행렬과 곱셈한 결과입니다." << endl;
			d.show();
			break;
		case 13: 
			int r6;
			cout << "------------------------------------------------------------------------------" << endl;
			cout << "내적을 할 벡터의 크기을 작성해주세요.(원래 벡터의 크기와 같아야 내적 가능)>> ";
			cin >> r6;
			if (r != r6) {
				cout << "내적을 할 수 없습니다." << endl;
				break;
			}
			b.changeDim(r6, 1);
			cout << "벡터를 순서대로 초기화 해주세요." << endl;
			b.write();
			m.dotProduct(b);
			break;
		case 14: 
			int r7;
			cout << "------------------------------------------------------------------------------" << endl;
			cout << "외적을 할 벡터의 크기을 작성해주세요.(원래 벡터의 크기와 같아야 외적 가능)>> ";
			cin >> r7;
			if (r != r7) {
				cout << "외적을 할 수 없습니다." << endl;
				break;
			}
			b.changeDim(r7, 1);
			cout << "벡터를 순서대로 초기화 해주세요." << endl;
			b.write();
			m.crossProduct(b);
			break;
		case 15: 
			int r8;
			cout << "------------------------------------------------------------------------------" << endl;
			cout << "거리를 구할 벡터의 크기을 작성해주세요.(원래 벡터의 크기와 같아야 거리 계산 가능)>> ";
			cin >> r8;
			if (r != r8) {
				cout << "거리 계산을 할 수 없습니다." << endl;
				break;
			}
			b.changeDim(r8, 1);
			cout << "벡터를 순서대로 초기화 해주세요." << endl;
			b.write();
			m.vecDistance(b);
			break;
		case 16: 
			cout << "------------------------------------------------------------------------------" << endl;
			if (r != c) {
				cout << "행렬식을 구할 수 없습니다." << endl;
				break;
			}
			if (r == 2) 
				cout << "이 행렬의 행렬식은 " << m.determ2() << "입니다." << endl;
			if (r == 3)
				cout << "이 행렬의 행렬식은 " << m.determ3() << "입니다." << endl;
			m.singular();
			break;
		case 17:
			cout << "------------------------------------------------------------------------------" << endl;
			cout << "현재 행렬 상태입니다." << endl;
			m.show();
			break;
		default:
			return 0;
		}
	}

	
}